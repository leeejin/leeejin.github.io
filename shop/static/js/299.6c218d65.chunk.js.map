{"version":3,"file":"static/js/299.6c218d65.chunk.js","mappings":"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","sources":["page/Cart.js","page/Detail.js"],"sourcesContent":["import { Table } from 'react-bootstrap'\r\nimport { memo, useState,useMemo } from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeName, increase } from './../store/userSlice.js';\r\nimport { changeCount, deleteCount } from './../store.js';\r\n\r\n// function 함수() { \r\n//     return 반복문10억번돌린결과\r\n//  }\r\n\r\n// let Child = memo(function () {\r\n//     console.log('재렌더링됨')\r\n//     return <div>자식임</div>\r\n// })\r\nfunction Cart() {\r\n\r\n    // let result =  useMemo(()=>{ \r\n    //     //컴포넌트 렌더링시 1회만 실행함 useEffect(html보여주는게 실행끝나면)랑 비슷함 근데 useMemo는 렌더링될때 \r\n    //     return 함수()\r\n    // },[state]);\r\n    let pro = useSelector((state) => state)\r\n    let dispatch = useDispatch() //store.js로 요청보내주는 함수\r\n    let [count, setCount] = useState(0);\r\n    return (\r\n        <div>\r\n            {/* {pro.user.name} {pro.user.age}의 장바구니 */}\r\n            {/* <Child count={count}></Child> */}\r\n            {/* <button onClick={() => setCount(count + 1)}>+</button> */}\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>상품명</th>\r\n                        <th>수량</th>\r\n                        <th>변경하기</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        pro.product.map((p, i) =>\r\n                            <tr key={i}>\r\n                                <td>{p.id}</td>\r\n                                <td>{p.title}</td>\r\n                                <td>{p.count}</td>\r\n                                <td>\r\n                                    <button onClick={() => {\r\n                                        dispatch(changeCount(p.id))\r\n                                    }}>+</button>\r\n                                    <button onClick={() => {\r\n                                        dispatch(deleteCount(p.id))\r\n                                    }}>-</button>\r\n                                </td>\r\n\r\n                            </tr>\r\n                        )\r\n                    }\r\n\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, Container, Nav } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { Context1 } from './../App.js'\r\nimport { changeCount, push } from './../store.js';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Cart from './Cart.js'\r\n\r\nlet Box = styled.div`\r\n  padding : 20px;\r\n  color : grey\r\n`\r\nlet YellowBtn = styled.button`\r\n    background:${props => props.bg};\r\n    color:${props => props.bg == 'blue' ? 'white' : 'black'};\r\n    padding:10px;\r\n`\r\nlet NewBtn = styled(YellowBtn)`\r\n    border-radius:20px;\r\n`\r\n// class Detail2 extends React.Component {\r\n//     componentDidMount() {\r\n//         //컴포넌트 mount시 여기 코드 실행\r\n//     }\r\n//     componentDidUpdate() {\r\n//         //컴포넌트 update시 여기 코드 실행\r\n//     }\r\n//     componentWillUnmount() {\r\n//         //컴포넌트 unmount시 여기 코드 실행\r\n//     }\r\n// }\r\nfunction Detail(props) {\r\n    let [alert, alertSet] = useState(true);\r\n    let [count, setCount] = useState(0);\r\n\r\n\r\n    //side Effect: 함수의 핵심기능과 상관없는 부가기능\r\n    //useEffect쓰는 이유 : html 렌더링 다한 다음 동작 ? 이거 DOM이랑 비슷한거같음 내 뇌피셜\r\n    useEffect(() => { //mount,update시 코드 실행해줌\r\n        //useEffect 안에 적는 코드들 : 어려운 연산, 서버에서 데이터가져오는 작업, 타이머 장착하는거\r\n        // for(var i=0; i<10000; i++){\r\n        //     console.log(1);\r\n        // } //console.log 두번 실행하는 거 없애고 싶으면 <React.StriceMode> 없애셈\r\n\r\n        let timer = setTimeout(() => { alertSet(false) }, 2000)\r\n        return () => { //useEffect 동작전에 실행되는 코드 . cleanup코드 : 기존코드 치우는거 여기서 많이 작성함\r\n            clearTimeout(timer)\r\n            //기존 데이터요청 제거할때 . 서버로 데이터요청하는 코드\r\n\r\n        }\r\n    }, [])  //count가 변할때마다 실행. 컴포넌트 mount시 1회만 실행하고 싶으면 이렇게\r\n\r\n    //    *** 빡대가리식 useEffect 정리 ***\r\n    //  1. 재렌더링마다 코드실행하고 싶으면 useEffect(()=>{ })\r\n    //  2. mount시 1회 코드 실행하고 싶으면  useEffect(()=>{ },[])\r\n    //  3. unmount시 1회 코드 실행하고 싶으면  useEffect(()=>{ return()=>{ } },[])\r\n    // 4. useEffect실행 전에 뭔가 실행하려면 언제나 1이나2에다가 return()=>{}\r\n    //  5. 특정 state 변경시에만 실행하려면 [state명] useEffect(()=>{ },[state명])\r\n\r\n    let [alert1, alertSet1] = useState(false);\r\n    let [input, setInput] = useState('');\r\n\r\n    useEffect(() => {\r\n        // if (isNaN(input) == true) {\r\n        //     alertSet1(true); \r\n        // }else{\r\n        //     alertSet1(false); \r\n        // }\r\n        isNaN(input) === true ? alertSet1(true) : alertSet1(false)\r\n\r\n    })\r\n\r\n    let [tab, tabSet] = useState(0); //3가지니까 0이라는 숫자로 상태저장\r\n\r\n    let [fade, setFade] = useState('');\r\n    useEffect(() => {\r\n        setFade('end');\r\n        return () => {\r\n            setFade('');\r\n        }\r\n    }, [tab])\r\n\r\n    let { id } = useParams();\r\n    let result = props.shoes.find((one) => one.id == id);\r\n    let pro = useSelector((state) => state.product)\r\n    let dispatch = useDispatch()\r\n\r\n    let { 재고 } = useContext(Context1);\r\n\r\n    let [proCount, countSet] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        var 수정한거 = JSON.parse(localStorage.getItem('watched'));\r\n        // 수정한거 = JSON.parse(수정한거)\r\n        // 수정한거.push(result)\r\n        let 몇번째 = 수정한거.findIndex((a) => { return a.id == result.id })\r\n        if (몇번째 == -1) 수정한거.push(result)\r\n        //Set 문법 : 중복방지 array\r\n        // 수정한거 = new Set(수정한거)\r\n        // 수정한거 = Array.from(수정한거) //자료를 array로 다시바꿈\r\n        localStorage.setItem('watched', JSON.stringify(수정한거))\r\n       \r\n    }, [])\r\n\r\n    return (<div className={`start ${fade}`}>\r\n        <>\r\n            {\r\n                alert === true ? (<div className=\"alert alert-warning\">2초 이내 구매시 할인</div>) : null\r\n            }\r\n\r\n\r\n            {count}\r\n            <button onClick={() => { setCount(count + 1) }}>버튼</button>\r\n\r\n           \r\n            <Container>\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <img src={`https://codingapple1.github.io/shop/shoes${Number(result.id) + 1}.jpg`} width=\"100%\" />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        {\r\n                            alert1 === false ? null : <div className=\"alert alert-danger\">경고 : 숫자만 입력하세요</div>\r\n                        }\r\n                        <input onChange={(e) => { setInput(e.target.value) }} />\r\n                        <h4 style={{ paddingTop: '15px' }}>{result.title}</h4>\r\n                        <p>{result.content}</p>\r\n                        <p>{result.price}</p>\r\n\r\n                        <Button variant=\"danger\" onClick={() => {\r\n                            let 몇번째 = pro.findIndex((a) => { return a.id == result.id })\r\n                            if (몇번째 == -1) {\r\n                                result.count = 1;\r\n                                dispatch(push(result));\r\n                            }\r\n                            else {\r\n                                dispatch(changeCount(result.id));\r\n                            }\r\n                        }}>주문하기</Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Nav variant=\"tabs\" defaultActiveKey=\"link0\">\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"link0\" onClick={() => { tabSet(0) }}>버튼0</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"link1\" onClick={() => { tabSet(1) }}>버튼1</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link eventKey=\"link2\" onClick={() => { tabSet(2) }}>버튼2</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n\r\n                <TabContent tab={tab} shoes={props.shoes} />\r\n\r\n            </Container>\r\n\r\n        </>\r\n    </div>)\r\n}\r\n\r\nfunction TabContent({ tab, shoes }) { //props.어쩌구 귀찮으면 {어쩌구} 쓰면 됨 팁1\r\n    // if (tab == 0) { return <div>내용0</div> }\r\n    // else if (tab == 1) { return <div>내용1</div> }\r\n    // else if (tab == 2) { return <div>내용2</div> } \r\n    //센스좋으면 if 필요없을 수도\r\n    let [fade, setFade] = useState('');\r\n\r\n    let { 재고 } = useContext(Context1)\r\n    useEffect(() => {\r\n        //tab state가 변할때 end뗐다가 부착\r\n        let time = setTimeout(() => { setFade('end'); }, 100);\r\n        //리액트의 automatic batching 기능\r\n        return () => {\r\n            clearTimeout(time);\r\n            setFade('');\r\n        }\r\n    }, [tab])\r\n\r\n    //4.탭 state가 변할때 end 부착\r\n    return (<div className={`start ${fade}`} >\r\n        {[<div>{shoes[0].content}</div>, <div>{재고}</div>, <div>내용2</div>][tab]}\r\n    </div>)\r\n}\r\n\r\n\r\nexport default Detail;"],"names":["pro","useSelector","state","dispatch","useDispatch","useState","product","map","p","i","id","title","count","onClick","changeCount","deleteCount","YellowBtn","styled","props","bg","TabContent","tab","shoes","fade","setFade","재고","useContext","Context1","useEffect","time","setTimeout","clearTimeout","className","content","alert","alertSet","setCount","timer","alert1","alertSet1","input","setInput","isNaN","tabSet","useParams","result","find","one","수정한거","JSON","parse","localStorage","getItem","findIndex","a","push","setItem","stringify","md","src","Number","width","onChange","e","target","value","style","paddingTop","price","variant","defaultActiveKey","eventKey"],"sourceRoot":""}